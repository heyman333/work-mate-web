import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const inputFile = path.join(__dirname, '../src/types/api-temp.ts');
const outputFile = path.join(__dirname, '../src/types/api.ts');

// Read the generated file
const content = fs.readFileSync(inputFile, 'utf8');

// Extract only the parts we need
const lines = content.split('\n');
const outputLines = [];
let inComponents = false;
let inSchemas = false;
let braceCount = 0;

// Add header
outputLines.push('/**');
outputLines.push(' * This file was auto-generated by openapi-typescript.');
outputLines.push(' * Do not make direct changes to the file.');
outputLines.push(' */');
outputLines.push('');

// Find and extract components section
for (let i = 0; i < lines.length; i++) {
  const line = lines[i];
  
  // Start of components interface
  if (line.includes('export interface components') || line.includes('export type components')) {
    inComponents = true;
    outputLines.push(line);
    braceCount = 0;
    continue;
  }
  
  // If we're in components, track braces
  if (inComponents) {
    outputLines.push(line);
    
    // Count braces to know when components interface ends
    const openBraces = (line.match(/{/g) || []).length;
    const closeBraces = (line.match(/}/g) || []).length;
    braceCount += openBraces - closeBraces;
    
    // If braces are balanced and we hit a closing brace, we've finished
    if (braceCount <= 0 && closeBraces > 0) {
      inComponents = false;
      break;
    }
  }
}

// Extract Schema exports (root types)
for (let i = 0; i < lines.length; i++) {
  const line = lines[i];
  if (line.startsWith('export type Schema')) {
    outputLines.push(line);
  }
}

// Write the output file
fs.writeFileSync(outputFile, outputLines.join('\n'));
console.log('âœ… Extracted schemas to src/types/api.ts');